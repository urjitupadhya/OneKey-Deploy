"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionsRepositoryOidcSubjectClaimCustomizationTemplate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage an OpenID Connect subject claim customization template for a GitHub
 * repository.
 *
 * More information on integrating GitHub with cloud providers using OpenID Connect and a list of available claims is
 * available in the [Actions documentation](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect).
 *
 * The following table lists the behaviour of `useDefault`:
 *
 * | `useDefault` | `includeClaimKeys` | Template used                                             |
 * |---------------|----------------------|-----------------------------------------------------------|
 * | `true`        | Unset                | GitHub's default                                          |
 * | `false`       | Set                  | `includeClaimKeys`                                      |
 * | `false`       | Unset                | Organization's default if set, otherwise GitHub's default |
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.Repository("example", {name: "example-repository"});
 * const exampleTemplate = new github.ActionsRepositoryOidcSubjectClaimCustomizationTemplate("example_template", {
 *     repository: example.name,
 *     useDefault: false,
 *     includeClaimKeys: [
 *         "actor",
 *         "context",
 *         "repository_owner",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the repository's name.
 *
 * ```sh
 * $ pulumi import github:index/actionsRepositoryOidcSubjectClaimCustomizationTemplate:ActionsRepositoryOidcSubjectClaimCustomizationTemplate test example_repository
 * ```
 */
class ActionsRepositoryOidcSubjectClaimCustomizationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ActionsRepositoryOidcSubjectClaimCustomizationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ActionsRepositoryOidcSubjectClaimCustomizationTemplate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ActionsRepositoryOidcSubjectClaimCustomizationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionsRepositoryOidcSubjectClaimCustomizationTemplate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["includeClaimKeys"] = state ? state.includeClaimKeys : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["useDefault"] = state ? state.useDefault : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.useDefault === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useDefault'");
            }
            resourceInputs["includeClaimKeys"] = args ? args.includeClaimKeys : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["useDefault"] = args ? args.useDefault : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActionsRepositoryOidcSubjectClaimCustomizationTemplate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ActionsRepositoryOidcSubjectClaimCustomizationTemplate = ActionsRepositoryOidcSubjectClaimCustomizationTemplate;
/** @internal */
ActionsRepositoryOidcSubjectClaimCustomizationTemplate.__pulumiType = 'github:index/actionsRepositoryOidcSubjectClaimCustomizationTemplate:ActionsRepositoryOidcSubjectClaimCustomizationTemplate';
//# sourceMappingURL=actionsRepositoryOidcSubjectClaimCustomizationTemplate.js.map