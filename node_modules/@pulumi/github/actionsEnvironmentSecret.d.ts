import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 */
export declare class ActionsEnvironmentSecret extends pulumi.CustomResource {
    /**
     * Get an existing ActionsEnvironmentSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionsEnvironmentSecretState, opts?: pulumi.CustomResourceOptions): ActionsEnvironmentSecret;
    /**
     * Returns true if the given object is an instance of ActionsEnvironmentSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ActionsEnvironmentSecret;
    /**
     * Date of actionsEnvironmentSecret creation.
     */
    readonly createdAt: pulumi.Output<string>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    readonly encryptedValue: pulumi.Output<string | undefined>;
    /**
     * Name of the environment.
     */
    readonly environment: pulumi.Output<string>;
    /**
     * Plaintext value of the secret to be encrypted.
     */
    readonly plaintextValue: pulumi.Output<string | undefined>;
    /**
     * Name of the repository.
     */
    readonly repository: pulumi.Output<string>;
    /**
     * Name of the secret.
     */
    readonly secretName: pulumi.Output<string>;
    /**
     * Date of actionsEnvironmentSecret update.
     */
    readonly updatedAt: pulumi.Output<string>;
    /**
     * Create a ActionsEnvironmentSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionsEnvironmentSecretArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ActionsEnvironmentSecret resources.
 */
export interface ActionsEnvironmentSecretState {
    /**
     * Date of actionsEnvironmentSecret creation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Name of the environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted.
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * Name of the secret.
     */
    secretName?: pulumi.Input<string>;
    /**
     * Date of actionsEnvironmentSecret update.
     */
    updatedAt?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ActionsEnvironmentSecret resource.
 */
export interface ActionsEnvironmentSecretArgs {
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Name of the environment.
     */
    environment: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted.
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repository: pulumi.Input<string>;
    /**
     * Name of the secret.
     */
    secretName: pulumi.Input<string>;
}
