"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Membership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a GitHub membership resource.
 *
 * This resource allows you to add/remove users from your organization. When applied,
 * an invitation will be sent to the user to become part of the organization. When
 * destroyed, either the invitation will be cancelled or the user will be removed.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Add a user to the organization
 * const membershipForSomeUser = new github.Membership("membership_for_some_user", {
 *     username: "SomeUser",
 *     role: "member",
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Membership can be imported using an ID made up of `organization:username`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/membership:Membership member hashicorp:someuser
 * ```
 */
class Membership extends pulumi.CustomResource {
    /**
     * Get an existing Membership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Membership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Membership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Membership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["downgradeOnDestroy"] = state ? state.downgradeOnDestroy : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["downgradeOnDestroy"] = args ? args.downgradeOnDestroy : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Membership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Membership = Membership;
/** @internal */
Membership.__pulumiType = 'github:index/membership:Membership';
//# sourceMappingURL=membership.js.map