"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The provider type for the github package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b;
        let resourceInputs = {};
        opts = opts || {};
        {
            resourceInputs["appAuth"] = pulumi.output(args ? args.appAuth : undefined).apply(JSON.stringify);
            resourceInputs["baseUrl"] = (_a = (args ? args.baseUrl : undefined)) !== null && _a !== void 0 ? _a : (utilities.getEnv("GITHUB_BASE_URL") || "https://api.github.com/");
            resourceInputs["insecure"] = pulumi.output(args ? args.insecure : undefined).apply(JSON.stringify);
            resourceInputs["maxRetries"] = pulumi.output(args ? args.maxRetries : undefined).apply(JSON.stringify);
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["parallelRequests"] = pulumi.output(args ? args.parallelRequests : undefined).apply(JSON.stringify);
            resourceInputs["readDelayMs"] = pulumi.output(args ? args.readDelayMs : undefined).apply(JSON.stringify);
            resourceInputs["retryDelayMs"] = pulumi.output(args ? args.retryDelayMs : undefined).apply(JSON.stringify);
            resourceInputs["retryableErrors"] = pulumi.output(args ? args.retryableErrors : undefined).apply(JSON.stringify);
            resourceInputs["token"] = (_b = ((args === null || args === void 0 ? void 0 : args.token) ? pulumi.secret(args.token) : undefined)) !== null && _b !== void 0 ? _b : utilities.getEnv("GITHUB_TOKEN");
            resourceInputs["writeDelayMs"] = pulumi.output(args ? args.writeDelayMs : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig() {
        return pulumi.runtime.call("pulumi:providers:github/terraformConfig", {
            "__self__": this,
        }, this);
    }
}
exports.Provider = Provider;
/** @internal */
Provider.__pulumiType = 'github';
//# sourceMappingURL=provider.js.map