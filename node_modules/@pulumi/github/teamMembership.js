"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamMembership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a GitHub team membership resource.
 *
 * This resource allows you to add/remove users from teams in your organization. When applied,
 * the user will be added to the team. If the user hasn't accepted their invitation to the
 * organization, they won't be part of the team until they do. When
 * destroyed, the user will be removed from the team.
 *
 * > **Note** This resource is not compatible with `github.TeamMembers`. Use either `github.TeamMembers` or `github.TeamMembership`.
 *
 * > **Note** Organization owners may not be set as "members" of a team; they may only be set as "maintainers". Attempting to set an organization owner as a "member" of a team may result in a `pulumi preview` diff that changes their status back to "maintainer".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Add a user to the organization
 * const membershipForSomeUser = new github.Membership("membership_for_some_user", {
 *     username: "SomeUser",
 *     role: "member",
 * });
 * const someTeam = new github.Team("some_team", {
 *     name: "SomeTeam",
 *     description: "Some cool team",
 * });
 * const someTeamMembership = new github.TeamMembership("some_team_membership", {
 *     teamId: someTeam.id,
 *     username: "SomeUser",
 *     role: "member",
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Team Membership can be imported using an ID made up of `teamid:username` or `teamname:username`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/teamMembership:TeamMembership member 1234567:someuser
 * ```
 *
 * ```sh
 * $ pulumi import github:index/teamMembership:TeamMembership member Administrators:someuser
 * ```
 */
class TeamMembership extends pulumi.CustomResource {
    /**
     * Get an existing TeamMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TeamMembership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TeamMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMembership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMembership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TeamMembership = TeamMembership;
/** @internal */
TeamMembership.__pulumiType = 'github:index/teamMembership:TeamMembership';
//# sourceMappingURL=teamMembership.js.map