import * as pulumi from "@pulumi/pulumi";
import * as outputs from "./types/output";
/**
 * Use this data source to retrieve information about environments for a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getRepositoryEnvironments({
 *     repository: "example-repository",
 * });
 * ```
 */
export declare function getRepositoryEnvironments(args: GetRepositoryEnvironmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryEnvironmentsResult>;
/**
 * A collection of arguments for invoking getRepositoryEnvironments.
 */
export interface GetRepositoryEnvironmentsArgs {
    /**
     * Name of the repository to retrieve the environments from.
     */
    repository: string;
}
/**
 * A collection of values returned by getRepositoryEnvironments.
 */
export interface GetRepositoryEnvironmentsResult {
    /**
     * The list of this repository's environments. Each element of `environments` has the following attributes:
     */
    readonly environments: outputs.GetRepositoryEnvironmentsEnvironment[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly repository: string;
}
/**
 * Use this data source to retrieve information about environments for a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getRepositoryEnvironments({
 *     repository: "example-repository",
 * });
 * ```
 */
export declare function getRepositoryEnvironmentsOutput(args: GetRepositoryEnvironmentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepositoryEnvironmentsResult>;
/**
 * A collection of arguments for invoking getRepositoryEnvironments.
 */
export interface GetRepositoryEnvironmentsOutputArgs {
    /**
     * Name of the repository to retrieve the environments from.
     */
    repository: pulumi.Input<string>;
}
