import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides GitHub issue labels resource.
 *
 * This resource allows you to create and manage issue labels within your
 * GitHub organization.
 *
 * > Note: github.IssueLabels cannot be used in conjunction with github.IssueLabel or they will fight over what your policy should be.
 *
 * This resource is authoritative. For adding a label to a repo in a non-authoritative manner, use github.IssueLabel instead.
 *
 * If you change the case of a label's name, its' color, or description, this resource will edit the existing label to match the new values. However, if you change the name of a label, this resource will create a new label with the new name and delete the old label. Beware that this will remove the label from any issues it was previously attached to.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Create a new, red colored label
 * const testRepo = new github.IssueLabels("test_repo", {
 *     repository: "test-repo",
 *     labels: [
 *         {
 *             name: "Urgent",
 *             color: "FF0000",
 *         },
 *         {
 *             name: "Critical",
 *             color: "FF0000",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Issue Labels can be imported using the repository `name`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/issueLabels:IssueLabels test_repo test_repo
 * ```
 */
export declare class IssueLabels extends pulumi.CustomResource {
    /**
     * Get an existing IssueLabels resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueLabelsState, opts?: pulumi.CustomResourceOptions): IssueLabels;
    /**
     * Returns true if the given object is an instance of IssueLabels.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is IssueLabels;
    /**
     * List of labels
     */
    readonly labels: pulumi.Output<outputs.IssueLabelsLabel[] | undefined>;
    /**
     * The GitHub repository
     */
    readonly repository: pulumi.Output<string>;
    /**
     * Create a IssueLabels resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueLabelsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering IssueLabels resources.
 */
export interface IssueLabelsState {
    /**
     * List of labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.IssueLabelsLabel>[]>;
    /**
     * The GitHub repository
     */
    repository?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a IssueLabels resource.
 */
export interface IssueLabelsArgs {
    /**
     * List of labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.IssueLabelsLabel>[]>;
    /**
     * The GitHub repository
     */
    repository: pulumi.Input<string>;
}
