import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * This resource can be imported using an ID made up of the secret name:
 *
 * ```sh
 * $ pulumi import github:index/codespacesUserSecret:CodespacesUserSecret test_secret test_secret_name
 * ```
 *
 * NOTE: the implementation is limited in that it won't fetch the value of the
 *
 * `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround.
 */
export declare class CodespacesUserSecret extends pulumi.CustomResource {
    /**
     * Get an existing CodespacesUserSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodespacesUserSecretState, opts?: pulumi.CustomResourceOptions): CodespacesUserSecret;
    /**
     * Returns true if the given object is an instance of CodespacesUserSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CodespacesUserSecret;
    /**
     * Date of codespacesSecret creation.
     */
    readonly createdAt: pulumi.Output<string>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    readonly encryptedValue: pulumi.Output<string | undefined>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    readonly plaintextValue: pulumi.Output<string | undefined>;
    /**
     * Name of the secret
     */
    readonly secretName: pulumi.Output<string>;
    /**
     * An array of repository ids that can access the user secret.
     */
    readonly selectedRepositoryIds: pulumi.Output<number[] | undefined>;
    /**
     * Date of codespacesSecret update.
     */
    readonly updatedAt: pulumi.Output<string>;
    /**
     * Create a CodespacesUserSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodespacesUserSecretArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering CodespacesUserSecret resources.
 */
export interface CodespacesUserSecretState {
    /**
     * Date of codespacesSecret creation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    secretName?: pulumi.Input<string>;
    /**
     * An array of repository ids that can access the user secret.
     */
    selectedRepositoryIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Date of codespacesSecret update.
     */
    updatedAt?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a CodespacesUserSecret resource.
 */
export interface CodespacesUserSecretArgs {
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    secretName: pulumi.Input<string>;
    /**
     * An array of repository ids that can access the user secret.
     */
    selectedRepositoryIds?: pulumi.Input<pulumi.Input<number>[]>;
}
