"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnterpriseActionsPermissions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage GitHub Actions permissions within your GitHub enterprise.
 * You must have admin access to an enterprise to use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example_org = github.getOrganization({
 *     name: "my-org",
 * });
 * const test = new github.EnterpriseActionsPermissions("test", {
 *     enterpriseSlug: "my-enterprise",
 *     allowedActions: "selected",
 *     enabledOrganizations: "selected",
 *     allowedActionsConfig: {
 *         githubOwnedAllowed: true,
 *         patternsAlloweds: [
 *             "actions/cache@*",
 *             "actions/checkout@*",
 *         ],
 *         verifiedAllowed: true,
 *     },
 *     enabledOrganizationsConfig: {
 *         organizationIds: [example_org.then(example_org => example_org.id)],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the name of the GitHub enterprise:
 *
 * ```sh
 * $ pulumi import github:index/enterpriseActionsPermissions:EnterpriseActionsPermissions test github_enterprise_name
 * ```
 */
class EnterpriseActionsPermissions extends pulumi.CustomResource {
    /**
     * Get an existing EnterpriseActionsPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EnterpriseActionsPermissions(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EnterpriseActionsPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnterpriseActionsPermissions.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowedActions"] = state ? state.allowedActions : undefined;
            resourceInputs["allowedActionsConfig"] = state ? state.allowedActionsConfig : undefined;
            resourceInputs["enabledOrganizations"] = state ? state.enabledOrganizations : undefined;
            resourceInputs["enabledOrganizationsConfig"] = state ? state.enabledOrganizationsConfig : undefined;
            resourceInputs["enterpriseSlug"] = state ? state.enterpriseSlug : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabledOrganizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabledOrganizations'");
            }
            if ((!args || args.enterpriseSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enterpriseSlug'");
            }
            resourceInputs["allowedActions"] = args ? args.allowedActions : undefined;
            resourceInputs["allowedActionsConfig"] = args ? args.allowedActionsConfig : undefined;
            resourceInputs["enabledOrganizations"] = args ? args.enabledOrganizations : undefined;
            resourceInputs["enabledOrganizationsConfig"] = args ? args.enabledOrganizationsConfig : undefined;
            resourceInputs["enterpriseSlug"] = args ? args.enterpriseSlug : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnterpriseActionsPermissions.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EnterpriseActionsPermissions = EnterpriseActionsPermissions;
/** @internal */
EnterpriseActionsPermissions.__pulumiType = 'github:index/enterpriseActionsPermissions:EnterpriseActionsPermissions';
//# sourceMappingURL=enterpriseActionsPermissions.js.map