"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Release = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage a release in a specific
 * GitHub repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = new github.Repository("repo", {
 *     name: "repo",
 *     description: "GitHub repo managed by Terraform",
 *     "private": false,
 * });
 * const example = new github.Release("example", {
 *     repository: repo.name,
 *     tagName: "v1.0.0",
 * });
 * ```
 *
 * ### On Non-Default Branch
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.Repository("example", {
 *     name: "repo",
 *     autoInit: true,
 * });
 * const exampleBranch = new github.Branch("example", {
 *     repository: example.name,
 *     branch: "branch_name",
 *     sourceBranch: example.defaultBranch,
 * });
 * const exampleRelease = new github.Release("example", {
 *     repository: example.name,
 *     tagName: "v1.0.0",
 *     targetCommitish: exampleBranch.branch,
 *     draft: false,
 *     prerelease: false,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the `name` of the repository, combined with the `id` of the release, and a `:` character for separating components, e.g.
 *
 * ```sh
 * $ pulumi import github:index/release:Release example repo:12345678
 * ```
 */
class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Release(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["assetsUrl"] = state ? state.assetsUrl : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["discussionCategoryName"] = state ? state.discussionCategoryName : undefined;
            resourceInputs["draft"] = state ? state.draft : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["generateReleaseNotes"] = state ? state.generateReleaseNotes : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["prerelease"] = state ? state.prerelease : undefined;
            resourceInputs["publishedAt"] = state ? state.publishedAt : undefined;
            resourceInputs["releaseId"] = state ? state.releaseId : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["tagName"] = state ? state.tagName : undefined;
            resourceInputs["tarballUrl"] = state ? state.tarballUrl : undefined;
            resourceInputs["targetCommitish"] = state ? state.targetCommitish : undefined;
            resourceInputs["uploadUrl"] = state ? state.uploadUrl : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["zipballUrl"] = state ? state.zipballUrl : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.tagName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagName'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["discussionCategoryName"] = args ? args.discussionCategoryName : undefined;
            resourceInputs["draft"] = args ? args.draft : undefined;
            resourceInputs["generateReleaseNotes"] = args ? args.generateReleaseNotes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prerelease"] = args ? args.prerelease : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["tagName"] = args ? args.tagName : undefined;
            resourceInputs["targetCommitish"] = args ? args.targetCommitish : undefined;
            resourceInputs["assetsUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["nodeId"] = undefined /*out*/;
            resourceInputs["publishedAt"] = undefined /*out*/;
            resourceInputs["releaseId"] = undefined /*out*/;
            resourceInputs["tarballUrl"] = undefined /*out*/;
            resourceInputs["uploadUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["zipballUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Release = Release;
/** @internal */
Release.__pulumiType = 'github:index/release:Release';
//# sourceMappingURL=release.js.map