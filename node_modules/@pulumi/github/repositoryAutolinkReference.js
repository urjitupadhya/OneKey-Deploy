"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryAutolinkReference = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage an autolink reference for a single repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = new github.Repository("repo", {
 *     name: "my-repo",
 *     description: "GitHub repo managed by Terraform",
 *     "private": false,
 * });
 * const autolink = new github.RepositoryAutolinkReference("autolink", {
 *     repository: repo.name,
 *     keyPrefix: "TICKET-",
 *     targetUrlTemplate: "https://example.com/TICKET?query=<num>",
 * });
 * ```
 *
 * ## Import
 *
 * ### Import by key prefix
 *
 * ```sh
 * $ pulumi import github:index/repositoryAutolinkReference:RepositoryAutolinkReference auto oof/OOF-
 * ```
 */
class RepositoryAutolinkReference extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryAutolinkReference resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryAutolinkReference(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryAutolinkReference.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryAutolinkReference.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["isAlphanumeric"] = state ? state.isAlphanumeric : undefined;
            resourceInputs["keyPrefix"] = state ? state.keyPrefix : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["targetUrlTemplate"] = state ? state.targetUrlTemplate : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.keyPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPrefix'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.targetUrlTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetUrlTemplate'");
            }
            resourceInputs["isAlphanumeric"] = args ? args.isAlphanumeric : undefined;
            resourceInputs["keyPrefix"] = args ? args.keyPrefix : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["targetUrlTemplate"] = args ? args.targetUrlTemplate : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryAutolinkReference.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RepositoryAutolinkReference = RepositoryAutolinkReference;
/** @internal */
RepositoryAutolinkReference.__pulumiType = 'github:index/repositoryAutolinkReference:RepositoryAutolinkReference';
//# sourceMappingURL=repositoryAutolinkReference.js.map