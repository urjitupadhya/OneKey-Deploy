"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamRepository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * > Note: github.TeamRepository cannot be used in conjunction with github.RepositoryCollaborators or
 * they will fight over what your policy should be.
 *
 * This resource manages relationships between teams and repositories
 * in your GitHub organization.
 *
 * Creating this resource grants a particular team permissions on a
 * particular repository.
 *
 * The repository and the team must both belong to the same organization
 * on GitHub. This resource does not actually *create* any repositories;
 * to do that, see `github.Repository`.
 *
 * This resource is non-authoritative, for managing ALL collaborators of a repo, use github.RepositoryCollaborators
 * instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Add a repository to the team
 * const someTeam = new github.Team("some_team", {
 *     name: "SomeTeam",
 *     description: "Some cool team",
 * });
 * const someRepo = new github.Repository("some_repo", {name: "some-repo"});
 * const someTeamRepo = new github.TeamRepository("some_team_repo", {
 *     teamId: someTeam.id,
 *     repository: someRepo.name,
 *     permission: "pull",
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Team Repository can be imported using an ID made up of `team_id:repository` or `team_name:repository`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/teamRepository:TeamRepository terraform_repo 1234567:terraform
 * ```
 *
 * ```sh
 * $ pulumi import github:index/teamRepository:TeamRepository terraform_repo Administrators:terraform
 * ```
 */
class TeamRepository extends pulumi.CustomResource {
    /**
     * Get an existing TeamRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TeamRepository(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TeamRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamRepository.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamRepository.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TeamRepository = TeamRepository;
/** @internal */
TeamRepository.__pulumiType = 'github:index/teamRepository:TeamRepository';
//# sourceMappingURL=teamRepository.js.map