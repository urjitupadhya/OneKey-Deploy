"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodespacesOrganizationSecretRepositories = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to manage repository allow list for existing GitHub Codespaces secrets within your GitHub organization.
 *
 * You must have write access to an organization secret to use this resource.
 *
 * This resource is only applicable when `visibility` of the existing organization secret has been set to `selected`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = github.getRepository({
 *     fullName: "my-org/repo",
 * });
 * const orgSecretRepos = new github.CodespacesOrganizationSecretRepositories("org_secret_repos", {
 *     secretName: "existing_secret_name",
 *     selectedRepositoryIds: [repo.then(repo => repo.repoId)],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using an ID made up of the secret name:
 *
 * ```sh
 * $ pulumi import github:index/codespacesOrganizationSecretRepositories:CodespacesOrganizationSecretRepositories org_secret_repos existing_secret_name
 * ```
 */
class CodespacesOrganizationSecretRepositories extends pulumi.CustomResource {
    /**
     * Get an existing CodespacesOrganizationSecretRepositories resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CodespacesOrganizationSecretRepositories(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CodespacesOrganizationSecretRepositories.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodespacesOrganizationSecretRepositories.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["selectedRepositoryIds"] = state ? state.selectedRepositoryIds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.selectedRepositoryIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectedRepositoryIds'");
            }
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["selectedRepositoryIds"] = args ? args.selectedRepositoryIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodespacesOrganizationSecretRepositories.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CodespacesOrganizationSecretRepositories = CodespacesOrganizationSecretRepositories;
/** @internal */
CodespacesOrganizationSecretRepositories.__pulumiType = 'github:index/codespacesOrganizationSecretRepositories:CodespacesOrganizationSecretRepositories';
//# sourceMappingURL=codespacesOrganizationSecretRepositories.js.map