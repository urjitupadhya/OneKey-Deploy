"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildxBuilder = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Docker Buildx builder instance. This resource allows you to create a  buildx builder with various configurations such as driver, nodes, and platform settings. Please see https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md for more documentation
 */
class BuildxBuilder extends pulumi.CustomResource {
    /**
     * Get an existing BuildxBuilder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BuildxBuilder(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BuildxBuilder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BuildxBuilder.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["append"] = state?.append;
            resourceInputs["bootstrap"] = state?.bootstrap;
            resourceInputs["buildkitConfig"] = state?.buildkitConfig;
            resourceInputs["buildkitFlags"] = state?.buildkitFlags;
            resourceInputs["dockerContainer"] = state?.dockerContainer;
            resourceInputs["driver"] = state?.driver;
            resourceInputs["driverOptions"] = state?.driverOptions;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["kubernetes"] = state?.kubernetes;
            resourceInputs["name"] = state?.name;
            resourceInputs["node"] = state?.node;
            resourceInputs["platforms"] = state?.platforms;
            resourceInputs["remote"] = state?.remote;
            resourceInputs["use"] = state?.use;
        }
        else {
            const args = argsOrState;
            resourceInputs["append"] = args?.append;
            resourceInputs["bootstrap"] = args?.bootstrap;
            resourceInputs["buildkitConfig"] = args?.buildkitConfig;
            resourceInputs["buildkitFlags"] = args?.buildkitFlags;
            resourceInputs["dockerContainer"] = args?.dockerContainer;
            resourceInputs["driver"] = args?.driver;
            resourceInputs["driverOptions"] = args?.driverOptions;
            resourceInputs["endpoint"] = args?.endpoint;
            resourceInputs["kubernetes"] = args?.kubernetes;
            resourceInputs["name"] = args?.name;
            resourceInputs["node"] = args?.node;
            resourceInputs["platforms"] = args?.platforms;
            resourceInputs["remote"] = args?.remote;
            resourceInputs["use"] = args?.use;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BuildxBuilder.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BuildxBuilder = BuildxBuilder;
/** @internal */
BuildxBuilder.__pulumiType = 'docker:index/buildxBuilder:BuildxBuilder';
//# sourceMappingURL=buildxBuilder.js.map