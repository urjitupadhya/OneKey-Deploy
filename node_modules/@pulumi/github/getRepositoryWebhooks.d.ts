import * as pulumi from "@pulumi/pulumi";
import * as outputs from "./types/output";
/**
 * Use this data source to retrieve webhooks for a given repository.
 *
 * ## Example Usage
 *
 * To retrieve webhooks of a repository:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = github.getRepositoryWebhooks({
 *     repository: "foo",
 * });
 * ```
 */
export declare function getRepositoryWebhooks(args: GetRepositoryWebhooksArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryWebhooksResult>;
/**
 * A collection of arguments for invoking getRepositoryWebhooks.
 */
export interface GetRepositoryWebhooksArgs {
    repository: string;
}
/**
 * A collection of values returned by getRepositoryWebhooks.
 */
export interface GetRepositoryWebhooksResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly repository: string;
    /**
     * An Array of GitHub Webhooks.  Each `webhook` block consists of the fields documented below.
     * ___
     */
    readonly webhooks: outputs.GetRepositoryWebhooksWebhook[];
}
/**
 * Use this data source to retrieve webhooks for a given repository.
 *
 * ## Example Usage
 *
 * To retrieve webhooks of a repository:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = github.getRepositoryWebhooks({
 *     repository: "foo",
 * });
 * ```
 */
export declare function getRepositoryWebhooksOutput(args: GetRepositoryWebhooksOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepositoryWebhooksResult>;
/**
 * A collection of arguments for invoking getRepositoryWebhooks.
 */
export interface GetRepositoryWebhooksOutputArgs {
    repository: pulumi.Input<string>;
}
