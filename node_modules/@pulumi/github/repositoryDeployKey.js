"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryDeployKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a GitHub repository deploy key resource.
 *
 * A deploy key is an SSH key that is stored on your server and grants
 * access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user
 * account.
 *
 * This resource allows you to add/remove repository deploy keys.
 *
 * Further documentation on GitHub repository deploy keys:
 * - [About deploy keys](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 * import * as tls from "@pulumi/tls";
 *
 * // Generate an ssh key using provider "hashicorp/tls"
 * const exampleRepositoryDeployKey = new tls.PrivateKey("example_repository_deploy_key", {algorithm: "ED25519"});
 * // Add the ssh key as a deploy key
 * const exampleRepositoryDeployKeyRepositoryDeployKey = new github.RepositoryDeployKey("example_repository_deploy_key", {
 *     title: "Repository test key",
 *     repository: "test-repo",
 *     key: exampleRepositoryDeployKey.publicKeyOpenssh,
 *     readOnly: true,
 * });
 * ```
 *
 * ## Import
 *
 * Repository deploy keys can be imported using a colon-separated pair of repository name
 * and GitHub's key id. The latter can be obtained by GitHub's SDKs and API.
 *
 * ```sh
 * $ pulumi import github:index/repositoryDeployKey:RepositoryDeployKey foo test-repo:23824728
 * ```
 */
class RepositoryDeployKey extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryDeployKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryDeployKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryDeployKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryDeployKey.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryDeployKey.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RepositoryDeployKey = RepositoryDeployKey;
/** @internal */
RepositoryDeployKey.__pulumiType = 'github:index/repositoryDeployKey:RepositoryDeployKey';
//# sourceMappingURL=repositoryDeployKey.js.map