import * as pulumi from "@pulumi/pulumi";
/**
 * This resource manages mappings between external groups for enterprise managed users and GitHub teams. It wraps the API detailed [here](https://docs.github.com/en/rest/reference/teams#external-groups). Note that this is a distinct resource from `github.TeamSyncGroupMapping`. `github.EmuGroupMapping` is special to the Enterprise Managed User (EMU) external group feature, whereas `github.TeamSyncGroupMapping` is specific to Identity Provider Groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const exampleEmuGroupMapping = new github.EmuGroupMapping("example_emu_group_mapping", {
 *     teamSlug: "emu-test-team",
 *     groupId: 28836,
 * });
 * ```
 *
 * ## Import
 *
 * GitHub EMU External Group Mappings can be imported using the external `group_id`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/emuGroupMapping:EmuGroupMapping example_emu_group_mapping 28836
 * ```
 */
export declare class EmuGroupMapping extends pulumi.CustomResource {
    /**
     * Get an existing EmuGroupMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmuGroupMappingState, opts?: pulumi.CustomResourceOptions): EmuGroupMapping;
    /**
     * Returns true if the given object is an instance of EmuGroupMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EmuGroupMapping;
    readonly etag: pulumi.Output<string>;
    /**
     * Integer corresponding to the external group ID to be linked
     */
    readonly groupId: pulumi.Output<number>;
    /**
     * Slug of the GitHub team
     */
    readonly teamSlug: pulumi.Output<string>;
    /**
     * Create a EmuGroupMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmuGroupMappingArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering EmuGroupMapping resources.
 */
export interface EmuGroupMappingState {
    etag?: pulumi.Input<string>;
    /**
     * Integer corresponding to the external group ID to be linked
     */
    groupId?: pulumi.Input<number>;
    /**
     * Slug of the GitHub team
     */
    teamSlug?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a EmuGroupMapping resource.
 */
export interface EmuGroupMappingArgs {
    /**
     * Integer corresponding to the external group ID to be linked
     */
    groupId: pulumi.Input<number>;
    /**
     * Slug of the GitHub team
     */
    teamSlug: pulumi.Input<string>;
}
