import * as pulumi from "@pulumi/pulumi";
import * as outputs from "./types/output";
/**
 * Use this data source to retrieve the list of variables for a GitHub repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getActionsVariables({
 *     name: "example",
 * });
 * ```
 */
export declare function getActionsVariables(args?: GetActionsVariablesArgs, opts?: pulumi.InvokeOptions): Promise<GetActionsVariablesResult>;
/**
 * A collection of arguments for invoking getActionsVariables.
 */
export interface GetActionsVariablesArgs {
    /**
     * Full name of the repository (in `org/name` format).
     */
    fullName?: string;
    /**
     * The name of the repository.
     */
    name?: string;
}
/**
 * A collection of values returned by getActionsVariables.
 */
export interface GetActionsVariablesResult {
    readonly fullName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name of the variable
     */
    readonly name: string;
    /**
     * list of variables for the repository
     */
    readonly variables: outputs.GetActionsVariablesVariable[];
}
/**
 * Use this data source to retrieve the list of variables for a GitHub repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getActionsVariables({
 *     name: "example",
 * });
 * ```
 */
export declare function getActionsVariablesOutput(args?: GetActionsVariablesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetActionsVariablesResult>;
/**
 * A collection of arguments for invoking getActionsVariables.
 */
export interface GetActionsVariablesOutputArgs {
    /**
     * Full name of the repository (in `org/name` format).
     */
    fullName?: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    name?: pulumi.Input<string>;
}
