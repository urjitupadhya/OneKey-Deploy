"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamSyncGroupMapping = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * This resource allows you to create and manage Identity Provider (IdP) group connections within your GitHub teams.
 * You must have team synchronization enabled for organizations owned by enterprise accounts.
 *
 * To learn more about team synchronization between IdPs and GitHub, please refer to:
 * https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/synchronizing-teams-between-your-identity-provider-and-github
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const exampleGroups = github.getOrganizationTeamSyncGroups({});
 * const exampleGroupMapping = new github.TeamSyncGroupMapping("example_group_mapping", {
 *     groups: .map(entry => ({
 *         groupId: entry.value.groupId,
 *         groupName: entry.value.groupName,
 *         groupDescription: entry.value.groupDescription,
 *     })),
 *     teamSlug: "example",
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Team Sync Group Mappings can be imported using the GitHub team `slug` e.g.
 *
 * ```sh
 * $ pulumi import github:index/teamSyncGroupMapping:TeamSyncGroupMapping example some_team
 * ```
 */
class TeamSyncGroupMapping extends pulumi.CustomResource {
    /**
     * Get an existing TeamSyncGroupMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TeamSyncGroupMapping(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TeamSyncGroupMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamSyncGroupMapping.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["teamSlug"] = state ? state.teamSlug : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.teamSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamSlug'");
            }
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["teamSlug"] = args ? args.teamSlug : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamSyncGroupMapping.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TeamSyncGroupMapping = TeamSyncGroupMapping;
/** @internal */
TeamSyncGroupMapping.__pulumiType = 'github:index/teamSyncGroupMapping:TeamSyncGroupMapping';
//# sourceMappingURL=teamSyncGroupMapping.js.map